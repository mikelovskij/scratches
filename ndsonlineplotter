import nds2
from gwpy.detector import Channel
from gwpy.io import nds as ndsio
from numpy import unique
from gwpy.timeseries import (TimeSeries, TimeSeriesDict)

## open connection, aight?
ifos = list(set([c.ifo for c in self.channels if c.ifo]))
if len(ifos) == 1:
    hosts = ndsio.host_resolution_order(ifos[0])
else:
    hosts = ndsio.host_resolution_order(None)
try:
    host, port = hosts[0]
except IndexError:
    raise ValueError("Cannot auto-select NDS server for "
                     "ifos: %s" % ifos)

connection = ndsio.auth_connect(host, port)
print 'Connection open'


# fetch the data:
def simplefetch(channels, start, end, **kwargs):
    kwargs.setdefault('connection', connection)
    uchannels = unique(channels)
    data = TimeSeriesDict.fetch(uchannels, start, end, **kwargs) # e ste funz da dove diavolo vengono? no idea, non si trovano altrove nel codice
    out = type(data)()
    for chan in channels:
        out[chan] = data[self._channel_basename(chan)].copy()
    return out

class NDSDataIterator(NDSDataSource):
    """Custom iterator to handle NDS1 update stride

    The NDS1 protocol iterator returns 1-second buffers under all
    user inputs, so we need to work around this and manually buffer the
    data.

    For NDS2 protocol connections, this wrapper is trivial.
    """
    def __init__(self, channels, duration=0, interval=1, host=None,
                 port=None, connection=None, logger=Logger('nds'),
                 gap='pad', pad=0.0, **kwargs):
        """Construct a new iterator
        """
        super(NDSDataIterator, self).__init__(channels, host=host, port=port,
                                              connection=connection,
                                              logger=logger, **kwargs)
        if self.connection.get_protocol() == 1:
            ndsstride = 1
        else:
            ndsstride = interval
        self.duration = duration
        self.interval = interval
        self.ndsstride = ndsstride
        self.gap = gap
        self.pad = pad

        self.start()

    def __iter__(self):
        return self

    def start(self):
        self.iterator = self.connection.iterate(
            self.ndsstride, self._unique_channel_names(self.channels))
        self.logger.debug('NDSDataIterator ready')
        return self.iterator

    def restart(self):
        del self.iterator
        self.connect(force=True)
        return self.start()

    def _next(self):
        uchannels = self._unique_channel_names(self.channels)
        new = TimeSeriesDict()
        span = 0
        epoch = 0
        self.logger.debug('Waiting for next NDS2 packet...')
        while span < self.interval:
            try:
                buffers = next(self.iterator)
            except RuntimeError as e:
                self.logger.error('RuntimeError caught: %s' % str(e))
                self.restart()
                break
            for buff, c in zip(buffers, uchannels):
                ts = TimeSeries.from_nds2_buffer(buff)
                try:
                    new.append({c: ts}, gap=self.gap, pad=self.pad)
                except ValueError as e:
                    if 'discontiguous' in str(e):
                        e.args = ('NDS connection dropped data between %d and '
                                  '%d' % (epoch, ts.span[0]),)
                    raise
                span = abs(new[c].span)
                epoch = new[c].span[-1]
                self.logger.debug('%ds data for %s received'
                                  % (abs(ts.span), str(c)))
        out = type(new)()
        for chan in self.channels:
            out[chan] = new[self._channel_basename(chan)].copy()
        return out

    def next(self):
        """Get the next data iteration

        For NDS1 connections this method simply loops over the underlying
        iterator until we have collected enough 1-second chunks.

        Returns
        -------
        data : :class:`~gwpy.timeseries.TimeSeriesDict`
           a new `TimeSeriesDict` with the concantenated, buffered data
        """
        # get new data
        new = self._next()
        if not new:
            self.logger.warning('No data were received')
            return self.data
        epoch = new.values()[0].span[-1]
        self.logger.debug('%d seconds of data received up to epoch %s'
                          % (self.interval, new.values()[0].span[-1]))
        # record in buffer
        self.append(new)
        if abs(self.segments) > self.duration:
            self.crop(start=epoch-self.duration)
        return self.data

    def fetch(self, *args, **kwargs):
        try:
            return super(NDSDataIterator, self).fetch(*args, **kwargs)
        except RuntimeError as e:
            if 'Another transfer' in str(e):
                self.connect(force=True)
                return super(NDSDataIterator, self).fetch(*args, **kwargs)
            else:
                raise
